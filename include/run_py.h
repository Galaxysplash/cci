#pragma once

constexpr const char *run_py = "import os\nimport platform\nfrom subprocess import run, PIPE\n\n# how your executable should be named\nproject_name: str = \"example\"\n\n# arguments you wonna use for testing\ntesting_arguments = \"tmp_test_project\"\n\n\n# build code (don't touch it, unless you know what your doing)\nwindows: bool = platform.system() == \"Windows\"\n\nif windows:\n\trun(\"rmdir /S /Q build\", shell = True)\nelse:\n\trun(\"rm -rf build\", shell = True)\n\nif not os.path.exists(\"build\"):\n\trun(\"mkdir build\", shell=True)\n\ndef execute_cmd(cmd: str, description: str):\n\tconan_result = run(\n\t\tcmd,\n\t\tshell=True,\n\t\tstdout=PIPE,\n\t\tstderr=PIPE\n\t)\n\n\tif conan_result.returncode == 0:\n\t\tprint(description + \" was successful!!!\\n\\n\\n\")\n\telse:\n\t\tprint(\"---DETAIL ZONE---\")\n\t\tif conan_result.stdout:\n\t\t\tprint(conan_result.stdout)\n\t\tif conan_result.stderr:\n\t\t\tprint(conan_result.stderr)\n\t\tprint(\"---END DETAIL ZONE---\")\n\t\t\n\t\tprint(\"\\n\\n\\n\" + description + \" has failed! (details are above)\")\n\t\texit(1)\n\n\n\ncmds = [\n\t\t\t(\n\t\t\t\t\"conan install . --build=missing -of build\",\n\t\t\t\t\"Conan installing packages required by your conanfile.txt\"\n\t\t\t),\n\t\t\t(\n\t\t\t\t\"cmake . -B build\",\n\t\t\t\t\"CMake pre generating the stuff necessary for building your project\"\n\t\t\t),\n\t\t\t(\n\t\t\t\t\"make -C build\",\n\t\t\t\t\"Make trying to build your project form the cmake generated stuff\"\n\t\t\t)\n\t\t]\n\nfor cmd in cmds:\n\texecute_cmd(cmd[0], cmd[1])\n\nif windows:\n\tif os.path.exists(f\".\\\\build\\\\{project_name}_exec.exe\"):\n\t\trun([f\".\\\\build\\\\{project_name}_exec.exe {testing_arguments}\"], shell=True, check = True)\nelse:\n\tif os.path.exists(f\"./build/{project_name}_exec\"):\n\t\trun([f\"./build/{project_name}_exec {testing_arguments}\"], shell=True, check = True)\n# end building code";